# Generated by Django 5.1 on 2024-08-16 14:04

import django.core.validators
import django.db.models.deletion
import project.models
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='KPIValue',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True, verbose_name='Уникальный идентификатор  (PK)')),
                ('name', models.CharField(max_length=64, verbose_name='Название метрики')),
            ],
            options={
                'db_table': 'kpi_values',
            },
        ),
        migrations.CreateModel(
            name='Links',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(blank=True, max_length=64, null=True, unique=True)),
                ('url', models.URLField(blank=True, max_length=255, null=True, unique=True)),
            ],
            options={
                'db_table': 'links',
            },
        ),
        migrations.CreateModel(
            name='TimeZones',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True, verbose_name='Уникальный идентификатор статуса (PK)')),
                ('name', models.CharField(max_length=64, unique=True, validators=[django.core.validators.MinLengthValidator(1), django.core.validators.RegexValidator(message='Название должно содержать только латинские буквы и /', regex='^[a-zA-Z/]+$')], verbose_name='Название часового пояса')),
                ('abbrev', models.CharField(max_length=5, validators=[django.core.validators.MinLengthValidator(3)], verbose_name='Аббревиатура часового пояса')),
                ('utc_offset', models.CharField(max_length=5, validators=[project.models.validate_utc_offset], verbose_name='Смещение относительно UTC')),
            ],
            options={
                'db_table': 'time_zones',
            },
        ),
        migrations.CreateModel(
            name='Vacations',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('start_date', models.DateTimeField(verbose_name='Дата начала отпуска')),
                ('end_date', models.DateTimeField(verbose_name='Дата окончания отпуска')),
            ],
            options={
                'db_table': 'vacations',
            },
        ),
        migrations.CreateModel(
            name='Departments',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True, verbose_name='Уникальный идентификатор статуса (PK)')),
                ('title', models.CharField(max_length=64, unique=True, verbose_name='Название отдела')),
                ('count_employee', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)], verbose_name='Количество сотрудников в департаменте/отделе')),
                ('count_project', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='Количество проектов в департаменте/отделе')),
                ('parent_department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sub_departments', to='project.departments')),
            ],
            options={
                'db_table': 'departments',
            },
        ),
        migrations.CreateModel(
            name='EmployeeHireTypes',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Уникальный идентификатор типа найма (PK)')),
                ('name', models.CharField(choices=[('Штатный', 'Штатный'), ('Аутсорс', 'Аутсорс')], max_length=64, validators=[django.core.validators.MinLengthValidator(1)], verbose_name='Тип найма сотрудника')),
                ('is_selected', models.BooleanField(default=False, verbose_name='Признак выбранного значения типа найма')),
            ],
            options={
                'db_table': 'employee_hire_types',
                'constraints': [models.UniqueConstraint(fields=('name',), name='unique_employee_hire_type_name')],
            },
        ),
        migrations.CreateModel(
            name='EmployeeStatuses',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True, verbose_name='Уникальный идентификатор статуса (PK)')),
                ('name', models.CharField(choices=[('active', 'Активный'), ('inactive', 'Неактивный'), ('on_vacation', 'В отпуске')], max_length=64, validators=[django.core.validators.MinLengthValidator(1)], verbose_name='Статус сотрудника')),
                ('is_selected', models.BooleanField(default=False, verbose_name='Признак выбранного значения статуса')),
            ],
            options={
                'verbose_name': 'Статус сотрудника',
                'verbose_name_plural': 'Статусы сотрудников',
                'db_table': 'employee_statuses',
                'ordering': ('name',),
                'constraints': [models.UniqueConstraint(fields=('name',), name='unique_employee_status_name')],
            },
        ),
        migrations.CreateModel(
            name='Employees',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Уникальный идентификатор сотрудника (PK)')),
                ('password_hash', models.CharField(max_length=128, validators=[django.core.validators.MinLengthValidator(8)], verbose_name='Хеш пароля пользователя')),
                ('first_name', models.CharField(max_length=64, validators=[django.core.validators.MinLengthValidator(1), django.core.validators.RegexValidator('^[a-zA-Zа-яА-ЯёЁ]+$', 'Only Latin or Cyrillic characters are allowed.')], verbose_name='Имя сотрудника')),
                ('last_name', models.CharField(max_length=64, validators=[django.core.validators.MinLengthValidator(1), django.core.validators.RegexValidator('^[a-zA-Zа-яА-ЯёЁ]+$', 'Only Latin or Cyrillic characters are allowed.')], verbose_name='Фамилия сотрудника')),
                ('patronymic', models.CharField(blank=True, max_length=64, null=True, validators=[django.core.validators.RegexValidator('^[a-zA-Zа-яА-ЯёЁ]*$', 'Only Latin or Cyrillic characters are allowed.')], verbose_name='Отчество сотрудника')),
                ('birth_date', models.DateTimeField(blank=True, null=True, validators=[project.models.employee_validate_birth_date], verbose_name='Дата рождения сотрудника с указанием временной зоны')),
                ('position', models.CharField(max_length=64, validators=[django.core.validators.MinLengthValidator(1), django.core.validators.RegexValidator('^[a-zA-Zа-яА-ЯёЁ\\s-]+$', 'Only Latin or Cyrillic characters, spaces, and hyphens are allowed.')], verbose_name='Должность сотрудника')),
                ('city', models.CharField(max_length=64, validators=[django.core.validators.MinLengthValidator(1), django.core.validators.RegexValidator('^[a-zA-Zа-яА-ЯёЁ\\s.-]+$', 'Only Latin or Cyrillic characters, spaces, hyphens, and dots are allowed.')], verbose_name='Город проживания сотрудника')),
                ('country', models.CharField(max_length=64, validators=[django.core.validators.MinLengthValidator(1), django.core.validators.RegexValidator('^[a-zA-Zа-яА-ЯёЁ\\s.-]+$', 'Only Latin or Cyrillic characters, spaces, hyphens, and dots are allowed.')], verbose_name='Страна проживания сотрудника')),
                ('email', models.EmailField(max_length=254, validators=[django.core.validators.MinLengthValidator(5)], verbose_name='Электронная почта пользователя')),
                ('phone', models.CharField(max_length=15, validators=[django.core.validators.MinLengthValidator(7), django.core.validators.RegexValidator('^[0-9+\\(\\)\\-\\s]+$', 'Only digits, plus, parentheses, hyphens, and spaces are allowed.')], verbose_name='Номер телефона')),
                ('telegram', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.MinLengthValidator(5), django.core.validators.RegexValidator('^@[0-9a-zA-Z_]+$', 'Telegram username must start with @ and can contain letters, numbers, and underscores.')], verbose_name='Имя пользователя в телеграмм')),
                ('foto', models.URLField(blank=True, max_length=255, null=True, validators=[django.core.validators.MinLengthValidator(5)], verbose_name='Ссылка на фото профиля пользователя')),
                ('personal_information', models.TextField(blank=True, max_length=300, null=True, verbose_name='Дополнительная информация о сотруднике')),
                ('hire_at', models.DateTimeField(verbose_name='Дата найма сотрудника')),
                ('update_at', models.DateTimeField(blank=True, null=True, verbose_name='Дата вносимых изменений в профиль сотрудника')),
                ('dismiss_at', models.DateTimeField(blank=True, null=True, verbose_name='Дата увольнения сотрудника')),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='project.departments', verbose_name='Уникальный идентификатор отдела (FK)')),
                ('hire_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='project.employeehiretypes', verbose_name='Уникальный идентификатор типа найма сотрудника (FK)')),
                ('parent_employee', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='project.employees', verbose_name='Уникальный идентификатор руководителя сотрудника (FK)')),
                ('status', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='project.employeestatuses', verbose_name='Уникальный идентификатор статуса сотрудника (FK)')),
                ('time_zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='project.timezones', verbose_name='Уникальный идентификатор временной зоны (FK)')),
                ('vacation', models.ManyToManyField(to='project.vacations', verbose_name='Уникальный идентификатор отпуска (FK)')),
            ],
            options={
                'db_table': 'employees',
            },
        ),
        migrations.CreateModel(
            name='Participant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_working', models.BooleanField(default=False)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_employee', to='project.employees')),
            ],
            options={
                'db_table': 'participants',
            },
        ),
        migrations.CreateModel(
            name='ProjectKpiThrough',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1000000)], verbose_name='Значение метрики')),
                ('measured_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата измерения')),
                ('kpi', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_kpi', to='project.kpivalue')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectPriorities',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True, verbose_name='Уникальный идентификатор приоритета (PK)')),
                ('name', models.CharField(blank=True, choices=[('high', 'Высокий'), ('medium', 'Средний'), ('low', 'Низкий')], max_length=64, null=True)),
                ('is_selected', models.BooleanField(default=False, verbose_name='Признак выбранного значения статуса')),
            ],
            options={
                'verbose_name': 'Приоритет проекта',
                'verbose_name_plural': 'Приоритеты проекта',
                'db_table': 'project_priorities',
                'ordering': ('name',),
                'constraints': [models.UniqueConstraint(fields=('name',), name='unique_project_priority_name')],
            },
        ),
        migrations.CreateModel(
            name='Projects',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Уникальный идентификатор проекта (PK)')),
                ('parent_project_id', models.UUIDField(blank=True, db_index=True, null=True, verbose_name='Уникальный идентификатор головного проекта (FK)')),
                ('title', models.CharField(max_length=255, verbose_name='Название проекта')),
                ('start_date', models.DateTimeField(verbose_name='Дата начала проекта')),
                ('end_date', models.DateTimeField(blank=True, null=True, verbose_name='Дата окончания проекта')),
                ('short_description', models.TextField(blank=True, max_length=300, null=True, verbose_name='Дополнительная информация о проекте, которая содержится в блоке «Описание проекта»')),
                ('comment', models.TextField(blank=True, max_length=100, null=True, verbose_name='Дополнительная информация о проекте, которая содержится в блоке «Комментарии»')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания проекта')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата внесения изменений в проект')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Дата удаления проекта')),
                ('kpi', models.ManyToManyField(related_name='projects', through='project.ProjectKpiThrough', to='project.kpivalue')),
                ('links', models.ManyToManyField(to='project.links')),
                ('participant', models.ManyToManyField(related_name='projects', through='project.Participant', to='project.employees')),
                ('priorities', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='project.projectpriorities', verbose_name='Уникальный идентификатор приоритетов проекта (FK)')),
            ],
            options={
                'verbose_name': 'Проект',
                'verbose_name_plural': 'Проекты',
                'db_table': 'projects',
                'ordering': ('title',),
            },
        ),
        migrations.AddField(
            model_name='projectkpithrough',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_kpi', to='project.projects'),
        ),
        migrations.AddField(
            model_name='participant',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_employee', to='project.projects'),
        ),
        migrations.CreateModel(
            name='ProjectStatuses',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True, verbose_name='Уникальный идентификатор статуса (PK)')),
                ('name', models.CharField(choices=[('not_started', 'Не начато'), ('in_progress', 'В процессе'), ('completed', 'Выполнено')], max_length=64, validators=[django.core.validators.MinLengthValidator(1)], verbose_name='Название статуса')),
                ('is_selected', models.BooleanField(default=False, verbose_name='Признак выбранного значения статуса')),
            ],
            options={
                'verbose_name': 'Статус проекта',
                'verbose_name_plural': 'Статусы проектов',
                'db_table': 'project_statuses',
                'ordering': ('name',),
                'constraints': [models.UniqueConstraint(fields=('name',), name='unique_project_status_name')],
            },
        ),
        migrations.AddField(
            model_name='projects',
            name='status',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='project.projectstatuses', verbose_name='Уникальный идентификатор статусов проекта (FK)'),
        ),
        migrations.AlterUniqueTogether(
            name='projectkpithrough',
            unique_together={('project', 'kpi')},
        ),
        migrations.AlterUniqueTogether(
            name='participant',
            unique_together={('project', 'employee')},
        ),
    ]
